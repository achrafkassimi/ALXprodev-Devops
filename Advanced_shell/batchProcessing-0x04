#!/bin/bash

# Define a list of Pokémon
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Create a directory to store Pokémon data files
mkdir -p pokemon_data

# Function to fetch data for each Pokémon
fetch_data() {
  local pokemon=$1
  echo "Fetching data for $pokemon..."

  # Attempt to fetch data using the Pokémon API
  curl -s "https://pokeapi.co/api/v2/pokemon/$pokemon" -o "pokemon_data/$pokemon.json"
  
  if [ $? -eq 0 ]; then
    echo "Saved data to pokemon_data/$pokemon.json ✅"
  else
    echo "Failed to fetch data for $pokemon ❌"
    return 1  # Return a non-zero status if the fetch failed
  fi
}

# Create an array to track background job PIDs (Process IDs)
declare -a job_pids

# Loop through Pokémon and fetch data in parallel
for pokemon in "${POKEMON_LIST[@]}"; do
  fetch_data $pokemon &
  job_pids+=($!)  # Store the background job's PID
done

# Wait for all background jobs to complete
for pid in "${job_pids[@]}"; do
  wait $pid  # Wait for each job
  exit_status=$?
  
  # If a job failed (non-zero exit status), kill any remaining jobs
  if [ $exit_status -ne 0 ]; then
    echo "One of the jobs failed, killing remaining background jobs..."
    for remaining_pid in "${job_pids[@]}"; do
      kill $remaining_pid 2>/dev/null  # Kill remaining jobs silently
    done
    exit 1  # Exit the script with failure status
  fi
done

# After all jobs are done, you can check the background jobs
echo "All Pokémon data fetched. Here are the background jobs:"
jobs -l

echo "Data fetching completed for all Pokémon."
